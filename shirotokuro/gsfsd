import pyglet, random, math, socket, connection, time, message, traceback, asyncore, threading, thread
from game import player, resources,lvl1
from pyglet.gl import *
from pyglet.window import key
from pyglet.window import mouse

OK = 200
ERR = 666
QUIT = 69
WAIT = 55
PAIR = 22
UPDATE = 20

class GameWindow(pyglet.window.Window):
	"""docstring for GameWindow"""
	def __init__(self):
		super(GameWindow, self).__init__(1000,600)
		
		#Initialize TCP connection
		host = '127.0.0.1'
		port = 7667
		
		self.s = socket.socket()
		
		print "Client tries to connect to server..."
		
		self.s.connect((host, port)) 
		self.conn = connection.connection(self.s)
		print self.conn
		self.s.send('hi')
		
		print "Client connected!"

		#Initialize default values
		self.playerid = -1
		self.player2id = -1
		self.playertype = -1

		e = threading.Event()
		self.updater = threading.Thread(target=self.p2_update, args=(self,e,))
		self.updater.daemon =True
		#Initial window states
		
		self.main_batch = pyglet.graphics.Batch()

		#Initialize players
		self.player1 = player.Player(lvl= lvl1.lvl1,x=105, y=105, batch=self.main_batch)
		self.player2 = player.Player(lvl= lvl1.lvl1,x=55, y=105,batch=self.main_batch)
		self.player2.set(2)

		self.game_over_label = pyglet.text.Label(text="GAME OVER",
									x=500, y=300, anchor_x='center', 
									font_size=48, bold= True, color=(236, 188, 175, 255))


		self.game_objects = [self.player1, self.player2]

		self.menu = True

	def on_draw(self):
		try:
			if(self.menu):
				self.clear()
				self.game_over_label.draw()
			else:
				self.clear
				glEnable(GL_BLEND)
				glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
				lvl1.lvl1_bg()
				self.main_batch.draw()
		except Exception, e:
			fuck_given = 0

	def on_mouse_press(self, x, y, button, modifiers):
		if button == mouse.LEFT:
			print 'The left mouse button was pressed.'
			if self.menu:
				self.menu = False
				self.game_start()
			else:
				self.menu = True
				self.clear()

	def game_start(self):
		self.playerid = self.confirm()
		self.player2id,self.playertype = self.pair()
		
		if self.playertype == 1:
			self.push_handlers(self.player1.key_handler)
		else:
			self.push_handlers(self.player2.key_handler)

		e.set()
		self.updater.start()
		pyglet.clock.schedule_interval(update, 1/120.0)

	def game_over(self):
		self.player1.delete()
		self.player2.delete()
		self.game_over_label.x=500
		self.game_objects.remove(self.player1)
		self.game_objects.remove(self.player2)

	#Connection stuff
	def confirm(self):
		while self.playerid == -1:
			message = self.conn.getMessage()
			if message[0] == 0:
				self.playerid = message[1]
				print "Your playerid is ", self.playerid

	def pair(self):
		print 'waiting...'
		while self.player2id == -1:
			msg = [WAIT, self.playerid, self.player2id, [], '']
			self.conn.sendMessage(msg)
			m = self.conn.getMessage()
			self.player2id = m[1]
			if player2id == -1:
				time.sleep(0.1)
		print "Your partner is ", player2id
		print "Your playertype is ", m[2]

	#Updaters

	def update(dt):
		if len(self.game_objects) > 0:
			
			if playertype == 1:
				keys = self.player1.update(dt)
				conn.sendMessage([UPDATE, playerid, player2id, [], keys])
			else:
				keys = self.player2.update(dt)
				conn.sendMessage([UPDATE, playerid, player2id, [], keys])
		
		player_dead = False
		for obj in self.game_objects:
			if obj.dead:
				player_dead= True
		
		if player_dead:
			conn.sendMessage([UPDATE,playerid, player2id, [], 'G.O.'])
			self.game_over()

	def p2_update(self,e):
		while True:
			e.wait()
			try:
				msg = conn.getMessage()
				if msg == QUIT:
					e.clear()
					self.conn.sendMessage([QUIT,playerid, player2id, [], ''])
					print "Sorry your partner quit. Exiting..."
					pyglet.clock.unschedule(update)
					self.close()
					print 'Bye!'
				else:
					if len(self.game_objects) > 0:
						if playertype == 1:
							self.player2.remote_update(msg, 0)
						else:
							self.player1.remote_update(msg, 0)
					
					player_dead = False
					
					for obj in self.game_objects:
						if obj.dead:
							player_dead= True
					
					if msg=='G.O.':
						self.game_over()

			except Exception, err:
				e.clear()

if __name__ == '__main__':
	window = GameWindow()
	pyglet.app.run()
		
